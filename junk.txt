#get_Path2 () {
#this is a function set up to call a dialog box for user to select a file to parse 
#prompt="Please select a file:"
#options=( $(find -maxdepth 1 -print0 | xargs -0) )

#PS3="$prompt "
#select input in "${options[@]}" "Quit" ; do
#        if (( REPLY > 0 && REPLY <= ${#options[@]} )) ; then
#	    echo "You picked $input which is file $REPLY"
#	    break
#		
#		
#	elif (( REPLY == 1 + ${options[@]} )) ; then
#	    exit
#		
#	else
#	    echo "Invalid option. Try again." ;
#	fi
#done
#}

#read -p "Please type your full file path, starting with a backslash if it is absolute. It's more than likely equal to $PWD/file.txt: " inputPath
#    echo "  "
#    echo "______________________________________________________________"

get_Path () {
clear
printf " If you would like to define your own path, please press y.  Pressing n will set your path as $PWD/log.txt. "
echo "  "
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
while true; do
    echo "  "
    echo -n "y or n: " 
    read answer

    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    case $answer in
# in theory, the "return 1 and 0's" should allow this to error check in a sense. to be tested, 
# https://unix.stackexchange.com/questions/268764/how-to-repeat-prompt-to-user-in-a-shell-script
                [yY] )
#                       clear
                       echo "__________________________________________________"
                       read -p "Please type your full file path, starting with a backslash if it is absolute. It's more than likely equal to $PWD/file.txt: " inputPath
                       return 0
                       ;;

                [nN] )
#                       clear
                       echo "Okay, we're going to just use $PWD/log.txt for you."
                       FILEPATH="$PWD/log.txt"
	    	       return 0
		       ;;

                   * ) 
#                       clear
	               echo "Invalid input"
                       return 1
		       ;;
    esac
done
}


